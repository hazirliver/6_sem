# INTERVAL [0;T] == [0;10]
# STEP == 0.05
# NUMBER n = 160
# EXPECTED VALUE m(t) = 1 + exp(-t)
# COVAR FUNC = 2*exp(-abs(tau)/2)
addTaskCallback(function(...) {set.seed(133);TRUE})



set.seed(133)
library(ggplot2)
###INITIAL DATA###

Tt <- 6
Hh <- 0.05
N <- 100

Mm <- function(t) {1 + exp(-t)}
covar <- function(t_1,t_2) {1/(4+(t_2-t_1)^2)}

install.packages("Matrix")
library(Matrix)
Cholesky(Sigma_mat)
#%vect_dim <- length(vect)

Nn <- Tt/Hh
#vect <- runif(Nn)


###2###

kh <- seq(0,Tt,Hh)

vect_expected <- Mm(kh)

Sigma_mat <- outer(kh,kh, FUN = covar)

#vect_expected <- Mm(vect) # Вектор матожиданий

#Sigma_mat <- outer(vect,vect,FUN = covar) # Внешнее произведение с собственной функцией


###3###


eps <- rnorm(Nn+1, mean = 0, sd = 1)


###4###


L <- t(chol(Sigma_mat))

eta <- as.numeric(L %*% eps)

###5###


ksi <- vect_expected + eta





###############
trajectories <- function(Tt, Hh)
{
  Nn <- Tt/Hh
  kh <- seq(0,Tt,Hh)
  vect_expected <- Mm(kh)
  Sigma_mat <- outer(kh,kh, FUN = covar)
  eps <- rnorm(Nn+1, mean = 0, sd = 1)
  L <- t(chol(Sigma_mat))
  eta <- as.numeric(L %*% eps)
  ksi <- vect_expected + eta
  return(ksi)
}

### Реплецирование
traj_list <- replicate(N, trajectories(Tt, Hh), simplify = F)

## График 1,98,155 траекторий
trajs <- data.frame(x = kh, exp_val = vect_expected,
                    traj_1 = round(traj_list[[1]],3),
                    traj_98 = round(traj_list[[98]],3),
                    traj_155 = round(traj_list[[155]],3))

trajs_pl <- ggplot(data = trajs, aes(x=x)) + 
  geom_line(aes(y=exp_val,colour="#4cff79"), lty = 2, lwd = 1.5) +
  geom_line(aes(y=traj_1,colour="#ff584c"), lwd = 0.5) + 
  geom_line(aes(y=traj_98,colour="#ffb14c"), lwd = 0.6) + 
  geom_line(aes(y=traj_155,colour="#614cff"), lwd = 0.7) +
  scale_color_discrete(name = "", 
                       labels = c("Expected value", 
                                  "Trajectory 1",
                                  "Trajectory 98",
                                  "Trajectory 155")) +
  labs(x = "", y = "")+
  theme_classic()

png(filename = "../img/trajs.png",
    width = 1920, height = 1080,
    res = 96 * 3)
trajs_pl
dev.off()

trajs_pl
################################################################
############################t1 = 1, t2 = 2
t1 <- 1
t2 <- 2
selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1),
                                       sapply(traj_list, `[[`, t2)),
                                     ncol = 2, byrow = F))
colnames(selected_cut) <- c("t1","t2")
head(selected_cut)


### Построение сечений с рассчетами corr, UB, LB

png(filename = "../img/1.png",
    width = 1920, height = 1080,
    res = 96 * 3)
ggplot(selected_cut, aes(x = t1, y = t2)) + geom_point() +
  labs(title = "Scatter plot",
       subtitle = "t1 = 1, t2 = 2",
       x = "", y = "") + 
  theme(plot.title = element_text(hjust=0.5))
dev.off()



r <- (sum((selected_cut$t1 - mean(selected_cut$t1))*
            (selected_cut$t2 - mean(selected_cut$t2))))/ 
  (sqrt(sum((selected_cut$t1 - mean(selected_cut$t1))^2) *
          sum((selected_cut$t2 - mean(selected_cut$t2))^2)))

cor_test <- cor.test(selected_cut$t1, selected_cut$t2,
                     method = "pearson")

r_tr <- Sigma_mat[1,2]/sqrt(Sigma_mat[1,1] * Sigma_mat[2,2])
r_tr


library(psychometric)
CIr(corr,Nn,0.95)

#output_tmp_f <- list(matr = selected_cut, scatter = scatter_plot,
#                     corr = cor_test)

### Формирование аутпута
corr <- as.numeric(cor_test$estimate)
corr_LB <- cor_test$conf.int[1]
corr_UB <- cor_test$conf.int[2]

output_main <- c(t1, t2, corr, corr_LB, corr_UB)









################################################################
############################t1 = 20, t2 = 150
t1 <- 20
t2 <- 150
selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1),
                                       sapply(traj_list, `[[`, t2)),
                                     ncol = 2, byrow = F))
colnames(selected_cut) <- c("t1","t2")
head(selected_cut)


### Построение сечений с рассчетами corr, UB, LB
png(filename = "../img/2.png",
    width = 1920, height = 1080,
    res = 96 * 3)
ggplot(selected_cut, aes(x = t1, y = t2)) + geom_point() +
  labs(title = "Scatter plot",
       subtitle = "t1 = 20, t2 = 150",
       x = "", y = "") + 
  theme(plot.title = element_text(hjust=0.5))
dev.off()



cor_test <- cor.test(selected_cut$t1, selected_cut$t2,
                     method = "pearson")

r_tr <- Sigma_mat[20,150]/sqrt(Sigma_mat[20,20] * Sigma_mat[150,150])
r_tr


output_tmp_f <- list(matr = selected_cut, scatter = scatter_plot,
                     corr = cor_test)

### Формирование аутпута
corr <- as.numeric(cor_test$estimate)
corr_LB <- cor_test$conf.int[1]
corr_UB <- cor_test$conf.int[2]

output_main <- c(t1, t2, corr, corr_LB, corr_UB)




################################################################
############################t1 = 130, t2 = 155
t1 <- 130
t2 <- 155
selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1),
                                       sapply(traj_list, `[[`, t2)),
                                     ncol = 2, byrow = F))
colnames(selected_cut) <- c("t1","t2")
head(selected_cut)


### Построение сечений с рассчетами corr, UB, LB
png(filename = "../img/3.png",
    width = 1920, height = 1080,
    res = 96 * 3)
ggplot(selected_cut, aes(x = t1, y = t2)) + geom_point() +
  labs(title = "Scatter plot",
       subtitle = "t1 = 130, t2 = 155",
       x = "", y = "") + 
  theme(plot.title = element_text(hjust=0.5))
dev.off()




cor_test <- cor.test(selected_cut$t1, selected_cut$t2)

r_tr <- Sigma_mat[130,155]/sqrt(Sigma_mat[130,130] * Sigma_mat[155,155])
r_tr

output_tmp_f <- list(matr = selected_cut, scatter = scatter_plot,
                     corr = cor_test)

### Формирование аутпута
corr <- as.numeric(cor_test$estimate)
corr_LB <- cor_test$conf.int[1]
corr_UB <- cor_test$conf.int[2]

output_main <- c(t1, t2, corr, corr_LB, corr_UB)








##########################################
traj_list_tr <- as.data.frame(t(simplify2array(traj_list)))
#library("psych")

#corr_test_matrix <- round(corr.test(traj_list_tr)$r,3)

#install.packages("corrplot")
library(corrplot)
M<-round(cor(traj_list_tr),2)
dim(M)
M[1:10,1:10]


png(filename = "../img/corrplot.png",
    width = 1920, height = 1080,
    res = 96 * 3)
corrplot(M, method="color", tl.pos='n')
dev.off()

png(filename = "../img/corrplot_clustered.png",
    width = 1920, height = 1080,
    res = 96 * 3)
corrplot(M, method="color", tl.pos='n')
lines(c(1, 150), c(150, 1), lwd=3, lty=2)
lines(c(50, 201), c(201, 50), lwd=3, lty=2)
dev.off()

lines(c(1, 150), c(150, 1), lwd=3, lty=2)
lines(c(50, 200), c(200, 50), lwd=3, lty=2)
corrplot(M, method="color", tl.pos='n')


M_negative <- length(M[M<0])
M_negative # Число отрицательных коэффициентов корреляции
length(M) # Количество элементов в корреляционной матрице (201*201)
M_negative_perc <- M_negative / length(M)
M_negative_perc # Процент отрицательных элементов
#corrplot(M, method="color", order = "hclust", hclust.method = "centroid",tl.pos='n')