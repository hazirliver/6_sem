library(shiny)
library(datasets)

# We tweak the "am" field to have nicer factor labels. Since this doesn't
# rely on any user inputs we can do this once at startup and then use the
# value throughout the lifetime of the application
mpgData <- mtcars
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))

# Define server logic required to plot various variables against mpg
shinyServer(function(input, output) {
  library(ggplot2)
  
  Tt <- reactive(input$Tt)
  Hh <- reactive(input$Hh)
  N <- reactive(input$N)
  
  Mm <- as.function(alist(t = , reactive(input$Mm)))
  covar <- as.function(alist(t_1 = , t_2 =,  reactive(input$covar)))
  
  t1 <- reactive(input$t_1)
  t2 <- reactive(input$t_2)
  
  reactive(set.seed(input$seed))
  
  main_func <- function(Tt, Hh, N, t1, t2)
  {
    ### Функция моделирования одной траектории
    trajectories <- function(Tt, Hh)
    {
      Nn <- Tt/Hh + 1
      vect <- runif(Nn)
      vect_expected <- Mm(vect)
      Sigma_mat <- outer(vect,vect,FUN = covar)
      eps <- runif(Nn)
      L <- t(chol(Sigma_mat))
      eta <- as.numeric(L %*% eps)
      ksi <- vect + eta
      return(ksi)
    }
    
    
    ### Реплецирование
    traj_list <- reactive(replicate(N, trajectories(Tt, Hh), simplify = F))
    
    ### Построение сечений с рассчетами corr, UB, LB
    selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1), sapply(traj_list, `[[`, t2)),
                                         ncol = 2, byrow = F))
    scatter_plot <- ggplot(selected_cut, aes(x = V1, y = V2)) + geom_point()
    cor_test <- cor.test(selected_cut$V1, selected_cut$V2)
    
    output <- list(matr = selected_cut, scatter = scatter_plot,
                   corr = cor_test)
    
    ### Формирование аутпута
    corr <- as.numeric(output$corr$estimate)
    corr_LB <- output$corr$conf.int[1]
    corr_UB <- output$corr$conf.int[2]
    
    output_main <- c(corr, corr_LB, corr_UB)
    
    return(output_main)
  }
  
  output$output_tmp <- reactive(main_func(Tt, Hh, N, t1, t2))
  #output$t1 <- t1
  #output$t2 <- t2
  #output$cor <- reactive(main_func(Tt, Hh, N, t1, t2)[1])
  #output$cor_LB <- reactive(main_func(Tt, Hh, N, t1, t2)[2])
  #output$cor_UB <- reactive(main_func(Tt, Hh, N, t1, t2)[3])
  
  
  # Compute the forumla text in a reactive expression since it is 
  # shared by the output$caption and output$mpgPlot expressions
  formulaText <- reactive({
    paste("mpg ~", input$variable)
  })
  
  # Return the formula text for printing as a caption
  output$caption <- renderText({
    formulaText()
  })
  
  # Generate a plot of the requested variable against mpg and only 
  # include outliers if requested
  output$mpgPlot <- renderPlot({
    boxplot(as.formula(formulaText()), 
            data = mpgData,
            outline = input$outliers)
  })
})