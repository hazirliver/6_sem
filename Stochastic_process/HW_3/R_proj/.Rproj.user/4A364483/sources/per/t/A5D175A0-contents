# INTERVAL [0;T] == [0;10]
# STEP == 0.05
# NUMBER n = 160
# EXPECTED VALUE m(t) = 1 + exp(-t)
# COVAR FUNC = 2*exp(-abs(tau)/2)
addTaskCallback(function(...) {set.seed(1337);TRUE})
set.seed(1337)
library(ggplot2)
###INITIAL DATA###


Tt <- 10
Hh <- 0.05
N <- 160

Mm <- function(t) {1 + exp(-t)}
covar <- function(t_1,t_2) {2*exp(-abs(t_2 - t_1)/2)}



trajectories <- function(Tt, Hh)
{
  Nn <- Tt/Hh + 1
  vect <- runif(Nn)
  vect_expected <- Mm(vect)
  Sigma_mat <- outer(vect,vect,FUN = covar)
  eps <- runif(Nn)
  L <- t(chol(Sigma_mat))
  eta <- as.numeric(L %*% eps)
  ksi <- vect + eta
  return(ksi)
}


traj_list <- replicate(N, trajectories(10, 0.05), simplify = F)

cuts <- function(traj_list, t1, t2)
{
  selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1), sapply(traj_list, `[[`, t2)),
                       ncol = 2, byrow = F))
  scatter_plot <- ggplot(selected_cut, aes(x = V1, y = V2)) + geom_point()
  cor_test <- cor.test(selected_cut$V1, selected_cut$V2)
  
  output <- list(matr = selected_cut, scatter = scatter_plot,
                 corr = cor_test)
  return(output)
}


corr <- cuts(traj_list, t_1, t_2)$corr
corr_LB <- tmp$corr$conf.int[1]
corr_UB <- tmp$corr$conf.int[2]

output <- c(corr, corr_LB, corr_UB)
##########################################









###########################################
main_func <- function(Tt, Hh, N, t1, t2)
{
  ### Функция моделирования одной траектории
  trajectories <- function(Tt, Hh)
  {
    Nn <- Tt/Hh
    kh <- seq(0,Tt,Hh)
    vect_expected <- Mm(kh)
    Sigma_mat <- outer(kh,kh, FUN = covar)
    eps <- rnorm(Nn+1, mean = 0, sd = 1)
    L <- t(chol(Sigma_mat))
    eta <- as.numeric(L %*% eps)
    ksi <- vect_expected + eta
    return(ksi)
  }
  
  ### Реплецирование
  traj_list <- replicate(N, trajectories(Tt, Hh), simplify = F)
  
  ### Построение сечений с рассчетами corr, UB, LB
  selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1), sapply(traj_list, `[[`, t2)),
                                       ncol = 2, byrow = F))
  scatter_plot <- ggplot(selected_cut, aes(x = V1, y = V2)) + geom_point()
  cor_test <- cor.test(selected_cut$V1, selected_cut$V2)
  
  output <- list(matr = selected_cut, scatter = scatter_plot,
                 corr = cor_test)
  
  ### Формирование аутпута
  corr <- as.numeric(output$corr$estimate)
  corr_LB <- output$corr$conf.int[1]
  corr_UB <- output$corr$conf.int[2]
  
  output_main <- c(corr, corr_LB, corr_UB)

  return(output_main)
}

t1_t2_matr <- data.frame(t1 = c(1, 100, 3), 
                         t2 = c(2, 110, 150))



out <- rep(NA,5)
for (i in 1:dim(t1_t2_matr)[1])
{
  tmp <- main_func(Tt = 10, Hh = 0.05, N = 160, t1 = t1_t2_matr[i,1], t2 = t1_t2_matr[i,2])
  oooout <- c(t1 = t1_t2_matr[i,1],
                       t2 = t1_t2_matr[i,2],
                       r = tmp[1],
                       r_LB = tmp[2],
                       r_UB = tmp[3])
  out <- rbind(out, oooout)
}

main_func(Tt = 10, Hh = 0.05, N = 160, t1 = 1, t2 = 2)




############################################

###

tmp <- cuts(traj_list, 1, 2)

as.numeric(tmp$corr$estimate)
tmp$corr$conf.int[2]

selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, 1), sapply(traj_list, `[[`, 2)),
                                     ncol = 2, byrow = F))
scatter_plot <- ggplot(selected_cut, aes(x = V1, y = V2)) + geom_point()
cor_test <- cor.test(first_traj[,1], first_traj[,2])



first_traj <- matrix(c(sapply(traj_list, `[[`, 1), sapply(traj_list, `[[`, 2)),
                     ncol = 2, byrow = F)

plot(first_traj)

cor.test(first_traj[,1], first_traj[,2])

#









main_func <- function(Tt, Hh, N, Mm_text, covar_text, t1, t2)
{
  Mm <<- eval(parse(text = paste('Mm <- function(t) { return(' , Mm_text , ')}', sep='')))
  covar <<- eval(parse(text = paste('covar <- function(t1,t2) { return(' , covar_text , ')}', sep='')))
  ### Функция моделирования одной траектории
  trajectories <- function(Tt, Hh)
  {
    Nn <- Tt/Hh + 1
    vect <- runif(Nn)
    vect_expected <- Mm(vect)
    Sigma_mat <- outer(vect,vect,FUN = covar)
    eps <- runif(Nn)
    L <- t(chol(Sigma_mat))
    eta <- as.numeric(L %*% eps)
    ksi <- vect + eta
    return(ksi)
  }
  
  ### Реплецирование
  traj_list <- replicate(N, trajectories(Tt, Hh), simplify = F)
  
  ### Построение сечений с рассчетами corr, UB, LB
  selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1), sapply(traj_list, `[[`, t2)),
                                       ncol = 2, byrow = F))
  scatter_plot <- ggplot(selected_cut, aes(x = V1, y = V2)) + geom_point()
  cor_test <- cor.test(selected_cut$V1, selected_cut$V2)
  
  output_tmp_f <- list(matr = selected_cut, scatter = scatter_plot,
                       corr = cor_test)
  
  ### Формирование аутпута
  corr <- as.numeric(output_tmp_f$corr$estimate)
  corr_LB <- output_tmp_f$corr$conf.int[1]
  corr_UB <- output_tmp_f$corr$conf.int[2]
  
  output_main <- c(corr, corr_LB, corr_UB)
  
  return(output_main)
}



main_func(Tt = 10,Hh = 0.05,N = 160,Mm_text = "1 + exp(-t)",covar_text = "2*exp(-abs(t2 - t1)/2)",t1 = 1,t2 = 2)






















###1###


 #%vect_dim <- length(vect)

Nn <- Tt/Hh
#vect <- runif(Nn)


###2###

kh <- seq(0,Tt,Hh)

vect_expected <- Mm(kh)

Sigma_mat <- outer(kh,kh, FUN = covar)

#vect_expected <- Mm(vect) # Вектор матожиданий

#Sigma_mat <- outer(vect,vect,FUN = covar) # Внешнее произведение с собственной функцией


###3###


eps <- rnorm(Nn+1, mean = 0, sd = 1)


###4###


L <- t(chol(Sigma_mat))

eta <- as.numeric(L %*% eps)

###5###


ksi <- vect_expected + eta





###############
trajectories <- function(Tt, Hh)
{
  Nn <- Tt/Hh
  kh <- seq(0,Tt,Hh)
  vect_expected <- Mm(kh)
  Sigma_mat <- outer(kh,kh, FUN = covar)
  eps <- rnorm(Nn+1, mean = 0, sd = 1)
  L <- t(chol(Sigma_mat))
  eta <- as.numeric(L %*% eps)
  ksi <- vect_expected + eta
  return(ksi)
}

### Реплецирование
traj_list <- replicate(N, trajectories(Tt, Hh), simplify = F)

################################################################
############################t1 = 1, t2 = 2
t1 <- 1
t2 <- 2
selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1),
                                       sapply(traj_list, `[[`, t2)),
                                     ncol = 2, byrow = F))
colnames(selected_cut) <- c("t1","t2")
head(selected_cut)


### Построение сечений с рассчетами corr, UB, LB

png(filename = "../img/1.png",
    width = 1920, height = 1080,
    res = 96 * 3)
ggplot(selected_cut, aes(x = t1, y = t2)) + geom_point() +
  labs(title = "Scatter plot",
       subtitle = "t1 = 1, t2 = 2",
       x = "", y = "") + 
  theme(plot.title = element_text(hjust=0.5))
dev.off()



r <- (sum((selected_cut$t1 - mean(selected_cut$t1))*
             (selected_cut$t2 - mean(selected_cut$t2))))/ 
  (sqrt(sum((selected_cut$t1 - mean(selected_cut$t1))^2) *
          sum((selected_cut$t2 - mean(selected_cut$t2))^2)))

cor_test <- cor.test(selected_cut$t1, selected_cut$t2,
                     method = "pearson")

#output_tmp_f <- list(matr = selected_cut, scatter = scatter_plot,
#                     corr = cor_test)

### Формирование аутпута
corr <- as.numeric(cor_test$estimate)
corr_LB <- cor_test$conf.int[1]
corr_UB <- cor_test$conf.int[2]

output_main <- c(t1, t2, corr, corr_LB, corr_UB)









################################################################
############################t1 = 20, t2 = 150
t1 <- 20
t2 <- 150
selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1),
                                       sapply(traj_list, `[[`, t2)),
                                     ncol = 2, byrow = F))
colnames(selected_cut) <- c("t1","t2")
head(selected_cut)


### Построение сечений с рассчетами corr, UB, LB
png(filename = "../img/2.png",
    width = 1920, height = 1080,
    res = 96 * 3)
ggplot(selected_cut, aes(x = t1, y = t2)) + geom_point() +
  labs(title = "Scatter plot",
       subtitle = "t1 = 20, t2 = 150",
       x = "", y = "") + 
  theme(plot.title = element_text(hjust=0.5))
dev.off()



cor_test <- cor.test(selected_cut$t1, selected_cut$t2,
                     method = "pearson")

output_tmp_f <- list(matr = selected_cut, scatter = scatter_plot,
                     corr = cor_test)

### Формирование аутпута
corr <- as.numeric(cor_test$estimate)
corr_LB <- cor_test$conf.int[1]
corr_UB <- cor_test$conf.int[2]

output_main <- c(t1, t2, corr, corr_LB, corr_UB)




################################################################
############################t1 = 130, t2 = 155
t1 <- 130
t2 <- 155
selected_cut <- as.data.frame(matrix(c(sapply(traj_list, `[[`, t1),
                                       sapply(traj_list, `[[`, t2)),
                                     ncol = 2, byrow = F))
colnames(selected_cut) <- c("t1","t2")
head(selected_cut)


### Построение сечений с рассчетами corr, UB, LB
png(filename = "../img/3.png",
    width = 1920, height = 1080,
    res = 96 * 3)
ggplot(selected_cut, aes(x = t1, y = t2)) + geom_point() +
  labs(title = "Scatter plot",
       subtitle = "t1 = 130, t2 = 155",
       x = "", y = "") + 
  theme(plot.title = element_text(hjust=0.5))
dev.off()




cor_test <- cor.test(selected_cut$t1, selected_cut$t2)

output_tmp_f <- list(matr = selected_cut, scatter = scatter_plot,
                     corr = cor_test)

### Формирование аутпута
corr <- as.numeric(cor_test$estimate)
corr_LB <- cor_test$conf.int[1]
corr_UB <- cor_test$conf.int[2]

output_main <- c(t1, t2, corr, corr_LB, corr_UB)








##########################################
traj_list_tr <- as.data.frame(t(simplify2array(traj_list)))
#library("psych")

#corr_test_matrix <- round(corr.test(traj_list_tr)$r,3)

#install.packages("corrplot")
library(corrplot)
M<-round(cor(traj_list_tr),2)
dim(M)
M[1:10,1:10]


png(filename = "../img/corrplot.png",
    width = 1920, height = 1080,
    res = 96 * 3)
  corrplot(M, method="color", tl.pos='n')
dev.off()

png(filename = "../img/corrplot_clustered.png",
    width = 1920, height = 1080,
    res = 96 * 3)
  corrplot(M, method="color", tl.pos='n')
  lines(c(1, 150), c(150, 1), lwd=3, lty=2)
  lines(c(50, 201), c(201, 50), lwd=3, lty=2)
dev.off()

lines(c(1, 150), c(150, 1), lwd=3, lty=2)
lines(c(50, 200), c(200, 50), lwd=3, lty=2)
corrplot(M, method="color", tl.pos='n')


M_negative <- length(M[M<0])
M_negative # Число отрицательных коэффициентов корреляции
length(M) # Количество элементов в корреляционной матрице (201*201)
M_negative_perc <- M_negative / length(M)
M_negative_perc # Процент отрицательных элементов
#corrplot(M, method="color", order = "hclust", hclust.method = "centroid",tl.pos='n')
