box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .5,
self.shifty = -.01,
self.shiftx = .11,
main = "Markov Chain")
png(filename = "../img/1.png",
width = 1920, height = 1080,
pointsize = 24, res = 96 * 1.25)
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .5,
self.shifty = -.01,
self.shiftx = .11,
main = "Markov Chain")
dev.off()
png(filename = "../img/1.png",
width = 1920, height = 1080,
res = 96 * 1.25)
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .5,
self.shifty = -.01,
self.shiftx = .11,
main = "Markov Chain")
dev.off()
p_k <- p0 %*% P^k
p_k
p_k <- t(p0) %*% P^k
p_k
P^k
p_k <- t(t(p0) %*% P^k)
p_k
p0
t(p0) %*% P^k
p_k <- p0 %*% P^k
p_k
r0 <- runif(100, min = 0, max = 1)
cut(r0, breaks = p0)
p0
cut(r0, breaks = sort(p0))
r[[1]][1]
r[[1]][1] < r0 < r[[1]][2]
r[[1]][1] < r0 and r0 < r[[1]][2]
r[[1]][1] < r0 && r0 < r[[1]][2]
xi <- ifelse(r0 < r[[1]][1],1,
0))
xi <- ifelse(r0 < r[[1]][1],1,0))
xi <- ifelse(r0 < r[[1]][1],1,0)
xi
xi <- ifelse(r0 < r[[1]][1],1,
ifelse(r[[1]][1] < r0 && r0 < r[[1]][2]),2,0)
ifelse(r[[1]][1] < r0 && r0 < r[[1]][2],2,0)
xi <- ifelse(r0 < r[[1]][1],1,
ifelse(r[[1]][1] < r0 && r0 < r[[1]][2],2,0))
xi
xi <- ifelse(r0 < r[[1]][1],1,
ifelse(r[[1]][1] < r0 && r0 < r[[1]][2]+1,2,0))
xi
xi <- ifelse(r0 < r[[1]][1],1,
ifelse(r[[1]][1] < r0 && r0 < r[[1]][2],2,0))
xi
r
xi <- ifelse(r0 < r[[1]][1],1,
ifelse(r[[1]][1] < r0 && r0 < r[[1]][2],2,
ifelse(r[[1]][2] < r0 && r0 < r[[1]][3],3,
ifelse(r[[1]][3] < r0 && r0 < r[[1]][4],4,
ifelse(r[[1]][4] < r0 && r0 < r[[1]][5],5,0)))))
xi
r0
r[[1]][5]
xi <- ifelse(r0 < r[[1]][1],1,
ifelse(r[[1]][1] < r0 && r0 < r[[1]][2],2,
ifelse(r[[1]][2] < r0 && r0 < r[[1]][3],3,
ifelse(r[[1]][4] < r0 && r0 < r[[1]][5],5,0))))
xi
xi <- ifelse(r0 < r[[1]][1],1,
ifelse(r0 < r[[1]][2],2,
ifelse(r0 < r[[1]][3],3,
ifelse(r0 < r[[1]][4],4,
ifelse(r0 < r[[1]][5],6,0)))))
xi
xi
r
r[[1]]
r0
xi
xi <- ifelse(r0 < r[[1]][1],0,
ifelse(r0 < r[[1]][2],1,
ifelse(r0 < r[[1]][3],2,
ifelse(r0 < r[[1]][4],3,
ifelse(r0 < r[[1]][5],4,0)))))
xi
foo(r0,1)
foo <- function(r0,j)
{
xi <- ifelse(r0 < r[[j]][1],0,
ifelse(r0 < r[[j]][2],1,
ifelse(r0 < r[[j]][3],2,
ifelse(r0 < r[[j]][4],3,
ifelse(r0 < r[[j]][5],4,0)))))
}
foo(r0,1)
foo(r0,1)
ifelse(r0 < r[[j]][1],0,
ifelse(r0 < r[[j]][2],1,
ifelse(r0 < r[[j]][3],2,
ifelse(r0 < r[[j]][4],3,
ifelse(r0 < r[[j]][5],4,0)))))
foo <- function(r0,j)
{
ifelse(r0 < r[[j]][1],0,
ifelse(r0 < r[[j]][2],1,
ifelse(r0 < r[[j]][3],2,
ifelse(r0 < r[[j]][4],3,
ifelse(r0 < r[[j]][5],4,0)))))
}
foo(r0,1)
foo(r0,2)
ifelse(r0_loc < r[[j]][1],0,
ifelse(r0_loc < r[[j]][2],1,
ifelse(r0_loc < r[[j]][3],2,
ifelse(r0_loc < r[[j]][4],3,
ifelse(r0_loc < r[[j]][5],4,0)))))
foo <- function(r0_loc,j)
{
ifelse(r0_loc < r[[j]][1],0,
ifelse(r0_loc < r[[j]][2],1,
ifelse(r0_loc < r[[j]][3],2,
ifelse(r0_loc < r[[j]][4],3,
ifelse(r0_loc < r[[j]][5],4,0)))))
}
foo(r0,2)
r0 <- runif(1, min = 0, max = 1)
foo(r0,1)
step_1 <- foo(r0,1)
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_2
step_1 <- foo(r0,1)
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_3 <- foo(runif(1, min = 0, max = 1),step_2)
step_4 <- foo(runif(1, min = 0, max = 1),step_3)
step_5 <- foo(runif(1
, min = 0, max = 1),step_4)
r0 <- runif(n, min = 0, max = 1)
step_1 <- foo(r0,1)
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_3 <- foo(runif(1, min = 0, max = 1),step_2)
step_4 <- foo(runif(1, min = 0, max = 1),step_3)
step_5 <- foo(runif(1, min = 0, max = 1),step_4)
step_1 <- foo(r0,1)
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_1
step_2
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_3 <- foo(runif(1, min = 0, max = 1),step_2)
step_1
step_2
step_3
r0 <- runif(1, min = 0, max = 1)
foo <- function(r0_loc,j)
{
ifelse(r0_loc < r[[j]][1],0,
ifelse(r0_loc < r[[j]][2],1,
ifelse(r0_loc < r[[j]][3],2,
ifelse(r0_loc < r[[j]][4],3,
ifelse(r0_loc < r[[j]][5],4,0)))))
}
step_1 <- foo(r0,1)
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_3 <- foo(runif(1, min = 0, max = 1),step_2)
step_4 <- foo(runif(1, min = 0, max = 1),step_3)
step_5 <- foo(runif(1, min = 0, max = 1),step_4)
xi
step_1
step_2
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_3 <- foo(runif(1, min = 0, max = 1),step_2)
step_4 <- foo(runif(1, min = 0, max = 1),step_3)
step_5 <- foo(runif(1, min = 0, max = 1),step_4)
xi
step_2
step_3
step_4
step_5
r_tmp <- replicate((m+1), runif((m-1), min = 0, max = 1), simplify = F)
### Начальные данные:
m <- 6 # Число состояний марковской цепи
k <- 5 # время (шаги)
n <- 180 # траектории
r_tmp <- replicate((m+1), runif((m-1), min = 0, max = 1), simplify = F)
r <- lapply(r_tmp, sort)
p_tmp <- lapply(r, diff)
heads <- lapply(r, head, 1)
tails <- lapply(r, function(x) (1-tail(x,1)))
p <- mapply(append, mapply(append, heads,p_tmp,SIMPLIFY = F),tails, SIMPLIFY = F)
r[[2]]
p[[2]]
p
p0 <- p[[1]] # вектор начальных условий
P <- t(simplify2array(p))[-1,] # матрица переходов
p0
P
p
##### Построение размеченного графа состояний цепи
install.packages("diagram")
install.packages("markovchain")
library(markovchain)
library(diagram)
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .5,
self.shifty = -.01,
self.shiftx = .11,
main = "Markov Chain")
### Начальные данные:
m <- 4 # Число состояний марковской цепи
k <- 8 # время (шаги)
n <- 100 # траектории
r_tmp <- replicate((m+1), runif((m-1), min = 0, max = 1), simplify = F)
r <- lapply(r_tmp, sort)
p_tmp <- lapply(r, diff)
heads <- lapply(r, head, 1)
tails <- lapply(r, function(x) (1-tail(x,1)))
p <- mapply(append, mapply(append, heads,p_tmp,SIMPLIFY = F),tails, SIMPLIFY = F)
p
sum(p[[1]])
p0 <- p[[1]] # вектор начальных условий
P <- t(simplify2array(p))[-1,] # матрица переходов
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .5,
self.shifty = -.01,
self.shiftx = .11,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .05,
self.shifty = -.01,
self.shiftx = .11,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .11,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .9,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .09,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .08,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.05,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .09,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .09,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .08,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.15,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .08,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .08,
main = "Markov Chain")
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
png(filename = "../img/1.png",
width = 1920, height = 1080,
res = 96 * 1.25)
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
dev.off()
aa <- matrix(c(0,5/11,6/11,
5/12,0,7/12,
6/13,7/13,0),nrow = 3, byrow = T)
aa
aa^3
aa %^% 3
#### Вычисление безусловных вероятностей состояний цепи на k шаге
install.packages("matrixcalc")
#### Вычисление безусловных вероятностей состояний цепи на k шаге
#install.packages("matrixcalc")
library(matrixcalc)
p_k <- p0 %*% matrix.power(P,k)
p_k
matrix.power(aa,3)
5/11 * 7/12 * 6/13
(5/11) * (7/12) * (6/13)
(5/11) * (7/12) * (6/13) * 2
aa <- matrix(c(0,3/11,8/11,
5/12,0,7/12,
6/13,7/13,0),nrow = 3, byrow = T)
matrix.power(aa,3)
aa,3
aa <- matrix(c(0,5/11,6/11,
5/12,0,7/12,
6/13,7/13,0),nrow = 3, byrow = T)
matrix.power(aa,3)
6/11 * 7/13 * 5/12
(5/11) * (7/12) * (6/13)
signif(matrix.power(aa,3),3)
bb <- matrix(c(1/2,0,1/2,0,
0,0,0,1,
1/2,1/4,1/4,0,
0,1/2,1/2,0),
byrow = T, ncol = 4)
bb
vect <- c(1/7, 2/7, 2/7, 2/7)
vect %*% bb
bb <- matrix(c(1/2,0,1/2,0,
0,0,0,1,
1/2,1/2,1/4,0,
0,1/2,1/2,0),
byrow = T, ncol = 4)
vect %*% bb
bb <- matrix(c(1/2,0,1/2,0,
0,0,0,1,
1/4,1/2,1/4,0,
0,1/2,1/2,0),
byrow = T, ncol = 4)
vect <- c(1/7, 2/7, 2/7, 2/7)
vect %*% bb
bb <- matrix(c(1/2,0,1/2,0,
0,0,0,1,
1/4,1/4,1/4,1/4,
0,1/2,1/2,0),
byrow = T, ncol = 4)
bb
vect <- c(1/7, 2/7, 2/7, 2/7)
vect %*% bb
bb <- matrix(c(1/2,0,1/2,0,
0,0,0,1,
1/2,1/2,0,0,
0,1/2,1/2,0),
byrow = T, ncol = 4)
bb
vect <- c(1/7, 2/7, 2/7, 2/7)
vect %*% bb
bb <- matrix(c(1/2,0,1/2,0,
0,0,0,1,
1/2,1/2,1/4,0,
0,1/2,1/2,0),
byrow = T, ncol = 4)
bb
vect <- c(1/7, 2/7, 2/7, 2/7)
vect %*% bb
vect
bb <- matrix(c(1/2,0,1/2,0,
0,0,0,1,
1/4,1/2,1/4,0,
0,1/2,1/2,0),
byrow = T, ncol = 4)
bb
vect <- c(1/7, 2/7, 2/7, 2/7)
vect %*% bb
vect
eigen(bb)
