ifelse(r0_loc < r[[j+1]][1],1,
ifelse(r0_loc < r[[j+1]][2],2,
ifelse(r0_loc < r[[j+1]][3],3,
ifelse(r0_loc < r[[j+1]][4],4,
ifelse(r0_loc < r[[j+1]][5],5,6)))))
}
step_1 <- foo(r0,1)
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_3 <- foo(runif(1, min = 0, max = 1),step_2)
step_4 <- foo(runif(1, min = 0, max = 1),step_3)
step_5 <- foo(runif(1, min = 0, max = 1),step_4)
trac <- list(c(step_1,step_2,step_3,step_4,step_5))
tracs[k] <- trac
}
tracs
P
r0 <- runif(1, min = 0, max = 1)
r0
foo <- function(r0_loc,j)
{
ifelse(r0_loc < r[[j+1]][1],1,
ifelse(r0_loc < r[[j+1]][2],2,
ifelse(r0_loc < r[[j+1]][3],3,
ifelse(r0_loc < r[[j+1]][4],4,
ifelse(r0_loc < r[[j+1]][5],5,6)))))
}
step_1 <- foo(r0,1)
step_1
r[[1]]
step_1 <- foo(r0,0)
step_1
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_2
r_1 <- runif(1, min = 0, max = 1)
step_2 <- foo(r_1,step_1)
step_2
r_1
r_2 <- runif(1, min = 0, max = 1)
r_2
step_3 <- foo(r_2,step_1)
step_3
> r_2 <- runif(1, min = 0, max = 1)
> r_2
[1] 0.2317151
> step_3 <- foo(r_2,step_1)
> step_3
[1] 2
step_3 <- foo(r_2,step_2)
step_3
r_3 <- runif(1, min = 0, max = 1)
r_3
step_4 <- foo(r_3,step_3)
step_4
r_4 <- runif(1, min = 0, max = 1)
r_4
step_5 <- foo(r_4,step_4)
step_5
c(step_1,step_2,step_3,step_4,step_5)
tracs_array <- simplify2array(tracs,higher = F)
tracs_array
tracs
tracs_array <- unlist(tracs)
tracs_array
tracs_array <- simplify2array(tracs,higher = T)
tracs_array
tracs_array <- simplify2array(t(tracs),higher = F)
tracs_array
tracs_array <- t(simplify2array(tracs,higher = F))
tracs_array
c("Тр." + str(1:n))
str(1:n)
as.character(1:n)
"Тр." + as.character(1:n)
paste("Тр.",as.character(1:n))
rownames(tracs_array) <- paste("Тр.",as.character(1:n))
tracs_array
colnames(tracs_array) <- c("Шаг 1","Шаг 2","Шаг 3","Шаг 4","Шаг 5")
tracs_array
head(tracs_array)
head(tracs_array,10)
tail(tracs_array,10)
tracs_array
hist(tracs_array)
hh <- hist(tracs_array)
hh
hh <- hist(tracs_array, breaks = 1:6)
hh
sum(hh$counts)
180*5
p_k
p_k <- p0 %*% matrix.power(P,k)
p_k
p_k <- p0 %*% matrix.power(P,100)
p_k
sum(p_k)
sum(hh$density)
hh$density
barplot(p_k)
library(ggplot2)
emp <- hist(tracs_array, breaks = m)
emp
emp <- hist(tracs_array, breaks = m)$counts
emp
emp <- hist(tracs_array, breaks = m)$density
emp
theor <- p_k
theor
theor <- as.numeric(p_k)
theor
sum(p_k)
emp <- hist(tracs_array, breaks = 0:m)$density
emp
c(rep("theor", m),rep("emperical", m))
matr <- matrix(c(rep("theor", m),rep("emperical", m),
1:m,1:m,
theor,emp))
matr <- matrix(c(rep("theor", m),rep("emperical", m),
1:m,1:m,
theor,emp), ncol = 3)
matr
rep(paste("Шаг",as.character(1:m)), 2)
plot_df <- data.frame(type = rep(c("theor", "emperical"), each=m),
step = rep(paste("Шаг",as.character(1:m)), 2),
prob = c(theor, emp))
plot_df
plot_df <- data.frame(type = rep(c("theoretical", "emperical"), each=m),
step = rep(paste("Шаг",as.character(1:m)), 2),
prob = c(theor, emp))
plot_df
ggplot(data=df2, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
prob_diff <- emp - thepr
prob_diff <- emp - theor
prob_diff
max(abs(prob_diff))
emp <- hist(tracs_array, breaks = 0:m)$density
emp
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
theor <- as.numeric(p_k)
plot_df <- data.frame(type = rep(c("theoretical", "emperical"), each=m),
step = rep(paste("Шаг",as.character(1:m)), 2),
prob = c(theor, emp))
png(filename = "../img/1.png",
width = 1920, height = 1080,
res = 96 * 1.25)
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
dev.off()
png(filename = "../img/2.png",
width = 1920, height = 1080,
res = 96 * 1.25)
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
dev.off()
png(filename = "../img/2.png",
width = 1920, height = 1080,
res = 96 * 1.5)
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
dev.off()
png(filename = "../img/2.png",
width = 1920, height = 1080,
res = 96 * 1.75)
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
dev.off()
png(filename = "../img/2.png",
width = 1920, height = 1080,
res = 96 * 2)
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
dev.off()
prob_diff <- emp - theor
prob_diff
max(abs(prob_diff))
png(filename = "../img/1.png",
width = 1920, height = 1080,
res = 96 * 1.25)
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
dev.off()
З
P
r_tmp <- replicate((m+1), runif((m-1), min = 0, max = 1), simplify = F)
### Начальные данные:
m <- 6 # Число состояний марковской цепи
k <- 5 # время (шаги)
n <- 180 # траектории
r_tmp <- replicate((m+1), runif((m-1), min = 0, max = 1), simplify = F)
r_tmp
r_tmp
r <- lapply(r_tmp, sort)
r
p_tmp <- lapply(r, diff)
heads <- lapply(r, head, 1)
tails <- lapply(r, function(x) (1-tail(x,1)))
p <- mapply(append, mapply(append, heads,p_tmp,SIMPLIFY = F),
tails, SIMPLIFY = F)
p
sapply(sum, p)
p <- mapply(append, mapply(append, heads,p_tmp,SIMPLIFY = F),
tails, SIMPLIFY = F)
sapply(sum, p)
mapply(sum, p)
p0 <- p[[1]] # вектор начальных условий
p0
P <- t(simplify2array(p))[-1,] # матрица переходов
P
png(filename = "../img/1.png",
width = 1920, height = 1080,
res = 96 * 1.25)
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
dev.off()
p_k <- p0 %*% matrix.power(P,k)
p_k
r0 <- runif(1, min = 0, max = 1)
r0
foo <- function(r0_loc,j)
{
ifelse(r0_loc < r[[j+1]][1],1,
ifelse(r0_loc < r[[j+1]][2],2,
ifelse(r0_loc < r[[j+1]][3],3,
ifelse(r0_loc < r[[j+1]][4],4,
ifelse(r0_loc < r[[j+1]][5],5,6)))))
}
step_1 <- foo(r0,0)
step_1
r[[1]]
r_1 <- runif(1, min = 0, max = 1)
r_1
step_2 <- foo(r_1,step_1)
step_2
r_2 <- runif(1, min = 0, max = 1)
r_2
step_3 <- foo(r_2,step_2)
step_3
r_3 <- runif(1, min = 0, max = 1)
r_3
step_4 <- foo(r_3,step_3)
step_4
r_4 <- runif(1, min = 0, max = 1)
r_4
step_5 <- foo(r_4,step_4)
step_5
c(step_1,step_2,step_3,step_4,step_5)
tracs <- list()
for (k in 1:n)
{
r0 <- runif(1, min = 0, max = 1)
foo <- function(r0_loc,j)
{
ifelse(r0_loc < r[[j+1]][1],1,
ifelse(r0_loc < r[[j+1]][2],2,
ifelse(r0_loc < r[[j+1]][3],3,
ifelse(r0_loc < r[[j+1]][4],4,
ifelse(r0_loc < r[[j+1]][5],5,6)))))
}
step_1 <- foo(r0,0)
step_2 <- foo(runif(1, min = 0, max = 1),step_1)
step_3 <- foo(runif(1, min = 0, max = 1),step_2)
step_4 <- foo(runif(1, min = 0, max = 1),step_3)
step_5 <- foo(runif(1, min = 0, max = 1),step_4)
trac <- list(c(step_1,step_2,step_3,step_4,step_5))
tracs[k] <- trac
}
tracs_array <- t(simplify2array(tracs,higher = F))
colnames(tracs_array) <- paste("Шаг",as.character(1:m))
rownames(tracs_array) <- paste("Тр.",as.character(1:n))
tracs_array
colnames(tracs_array) <- paste("Шаг",as.character(1:k))
1:k
k <- 5 # время (шаги)
colnames(tracs_array) <- paste("Шаг",as.character(1:k))
tracs_array
head(tracs_array,10)
tail(tracs_array,10)
emp <- hist(tracs_array, breaks = 0:m)$density
emp
theor <- as.numeric(p_k)
theor
plot_df <- data.frame(type = rep(c("theoretical", "emperical"), each=m),
step = rep(paste("Шаг",as.character(1:m)), 2),
prob = c(theor, emp))
png(filename = "../img/2.png",
width = 1920, height = 1080,
res = 96 * 2)
ggplot(data=plot_df, aes(x=step, y=prob, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw()
dev.off()
prob_diff <- emp - theor
prob_diff
max(abs(prob_diff))
З
P
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
png(filename = "../img/1.png",
width = 1920, height = 1080,
res = 96 * 1.25)
plotmat(signif(t(P),3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
dev.off()
plotmat(signif(t(P),3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
t(P)
sum(t(P)[2,])
sum(t(P)[1,])
sum(t(P)[,1])
plotmat(signif(P,3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
plotmat(signif(t(P),3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
P
png(filename = "../img/1.png",
width = 1920, height = 1080,
res = 96 * 1.25)
plotmat(signif(t(P),3),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.04,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.25,
arr.width=.1,
self.cex = .7,
self.shifty = -.01,
self.shiftx = .07,
main = "Markov Chain")
dev.off()
signif(r,5)
r
mapply(signif,r,5)
lapply(signif,r,5)
sapply(signif,r,5)
r
print(r,digits = 5)
print(,digits = 5)
print(p,digits = 5)
print(P,digits = 5)
install.packages("matlib")
library(matlib)
b <- 1:m
paste("p", as.character(1:m))
showEqn(P, b, vars = paste("p", as.character(1:m),sep = ""))
signif(showEqn(P, b, vars = paste("p", as.character(1:m),sep = "")), 3)
eq <- showEqn(P, b, vars = paste("p", as.character(1:m),sep = ""))
print(eq, digits = 4)
eq <- showEqn(signif(P,3), b, vars = paste("p", as.character(1:m),sep = ""))
b <- rep(1,m)
eq <- showEqn(signif(P,3), b, vars = paste("p", as.character(1:m),sep = ""))
eq <- showEqn(signif(P,3), b, vars = paste("p", as.character(1:m),sep = ""), simplify = T)
eq <- showEqn(signif(P,3), b, vars = paste("p", as.character(1:m),sep = ""), reduce =  = T)
eq <- showEqn(signif(P,3), b, vars = paste("p", as.character(1:m),sep = ""), reduce = T)
eq <- showEqn(signif(P,3), b, vars = paste("p", as.character(1:m),sep = ""))
eq <- showEqn(rbind(P,b), b, vars = paste("p", as.character(1:m),sep = ""))
b <- rep(1,m+1)
eq <- showEqn(rbind(P,b), b, vars = paste("p", as.character(1:m),sep = ""))
rbind(P,b)
b <- rep(1,m+1)
eq <- showEqn(rbind(P,rep(1,m)), b, vars = paste("p", as.character(1:m),sep = ""))
showEqn(signif(rbind(P,rep(1,m)),3), b, vars = paste("p", as.character(1:m),sep = ""))
plotEqn(P,b)
plotEqn(P,rep(1,m))
Solve(eq, fractions = T)
Solve(rbind(P,rep(1,m),b)
Solve(rbind(P,rep(1,m),b))
rbind(P,rep(1,m)
rbind(P,rep(1,m))
Solve(rbind(P,rep(1,m)),b)
Solve(P,b)
Solve(P,rep(1,m))
echelon(rbind(P,rep(1,m)),b)
echelon(rbind(P,rep(1,m)),b,verbose = T)
rep(0,m-k)
P,c(rep(1,m-1),rep(0,m-k)))
rbind(P,c(rep(1,m-1),rep(0,m-k)))
Solve(rbind(P,c(rep(1,m-1),rep(0,m-k))),b)
Solve(rbind(P,rep(1,m)),b)
b
showEqn(signif(rbind(P,rep(1,m)),3), b, vars = paste("p", as.character(1:m),sep = ""))
diag(m)
P - diag(m)
Solve(rbind(P - diag(m),rep(1,m)),b)
b <- rep(0,m+1)
showEqn(signif(rbind(P - diag(m),rep(1,m)),3), b, vars = paste("p", as.character(1:m),sep = ""))
Solve(rbind(P - diag(m),rep(1,m)),b)
rbind(P - diag(m),rep(1,m))
Solve(rbind(P - diag(m),rep(1,m)),b)
showEqn(signif(rbind(P - diag(m),rep(1,m)),3), b, vars = paste("p", as.character(1:m),sep = ""))
solve(rbind(P - diag(m),rep(1,m)),b)
solve(P - diag(m),b)
solve(P - diag(m),rep(0,m))
(P - diag(m)
)
solve(signif(P - diag(m),3),rep(0,m))
solve(signif(P - diag(m),2),rep(0,m))
solve(signif(P - diag(m),5),rep(0,m))
solve(signif(P - diag(m),9),rep(0,m))
showEqn(signif(rbind(P - diag(m),rep(1,m)),3), b, vars = paste("p", as.character(1:m),sep = ""))
b <- с(rep(0,m),1)
b <- c(rep(0,m),1)
b
showEqn(signif(rbind(P - diag(m),rep(1,m)),3), b, vars = paste("p", as.character(1:m),sep = ""))
Solve(rbind(P - diag(m),rep(1,m)),b)
showEqn(signif(rbind(P - diag(2,m),rep(1,m)),3), b, vars = paste("p", as.character(1:m),sep = ""))
Solve(rbind(P - diag(2,m),rep(1,m)),b)
Solve(rbind(P - diag(1,m),rep(1,m)),b)
echelon(rbind(P - diag(1,m),rep(1,m)),b,verbose =T)
signif(rbind(P - diag(2,m),rep(1,m)),3)
signif(rbind(P - diag(m),rep(1,m)),3)
solve(rbind(P - diag(1,m),rep(1,m)))
solve(rbind(P - diag(1,m)))
solve(signif(rbind(P - diag(1,m)),3))
solve(signif(rbind(P - diag(1,m)),7))
solve(signif(rbind(P - diag(1,m)),17))
solve(signif(rbind(P - diag(1,m)),11))
showEqn(signif(rbind(P - diag(m),rep(1,m)),3), b,
vars = paste("p", as.character(1:m),sep = ""))
showEqn(signif(rbind(P - diag(m),rep(1,m)),3), b,
vars = paste("p", as.character(1:m),sep = ""), latex = T)
